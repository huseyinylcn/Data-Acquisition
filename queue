#include <stdio.h>
#include <stdlib.h>



// Sensör verilerini tutan yapı
typedef struct {
    int zaman;        
    float x_sensor;   
    float y_sensor;   
    float z_sensor;  
} SensorVerisi;



// Kuyruk yapısı
typedef struct {
    int son;
    SensorVerisi* eleman;
} Kuyruklar;



// Kuyruk oluşturma fonksiyonu
Kuyruklar* createQueue(int boyut) {
    Kuyruklar* kuyruk = (Kuyruklar*)malloc(sizeof(Kuyruklar)); 
    kuyruk->son = -1;
    kuyruk->eleman = (SensorVerisi*)malloc(boyut * sizeof(SensorVerisi)); 
    return kuyruk;
}



// Kuyruk dolu mu?
int isFull(Kuyruklar* kuyruk, int boyut) {
    if (kuyruk->son >= boyut - 1)
        return -1;  // Dolu
    return 1;  // Dolu değil
}



// Kuyruk boş mu?
int isEmpty(Kuyruklar* kuyruk) {
    if (kuyruk->son == -1)
        return -1;  // Boş
    return 1;  // Boş değil
}




// Kuyruğa sensör verisi ekleme fonksiyonu
void enqueue(Kuyruklar* kuyruk, int boyut, int zaman, float x, float y, float z) {
    if (isFull(kuyruk, boyut) == -1) {
        printf("Kuyruk dolu!\n");}
		 
	else {
        kuyruk->son++;
        kuyruk->eleman[kuyruk->son].zaman = zaman;
        kuyruk->eleman[kuyruk->son].x_sensor = x;
        kuyruk->eleman[kuyruk->son].y_sensor = y;
        kuyruk->eleman[kuyruk->son].z_sensor = z;}
}



// Kuyruktan sensör verisi çıkarma fonksiyonu
SensorVerisi dequeue(Kuyruklar* kuyruk) {
    SensorVerisi cikarilanEleman;
    
    if (isEmpty(kuyruk) == -1) {
        printf("Kuyruk boş!\n");
        cikarilanEleman.zaman = -1;  // Geçerli olmayan bir değer
        return cikarilanEleman;}
		 
	else {
        cikarilanEleman = kuyruk->eleman[0];
        
        for (int i = 1; i <= kuyruk->son; i++) {
            kuyruk->eleman[i - 1] = kuyruk->eleman[i];}
            
        kuyruk->son--;
        return cikarilanEleman;
    }}



// Kuyruk bellekten temizleme fonksiyonu
void freeQueue(Kuyruklar* kuyruk) {
    free(kuyruk->eleman);  
    free(kuyruk); }